{"version":3,"sources":["serviceWorker.js","components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundary.jsx","containers/App.jsx","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","id","email","className","alt","src","CardList","robots","map","robot","key","SearchBox","searchField","onSearchChange","type","placeholder","value","onChange","Scroll","children","style","overflowY","border","height","ErrorBoundary","props","state","hasError","error","info","this","setState","Component","App","useSelector","searchRobots","requestRobots","isPending","dispatch","useDispatch","useEffect","fetch","then","response","json","data","payload","catch","filteredRobots","filter","toLowerCase","includes","event","target","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddlware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.2e6b9b2c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\nconst Card = ({name, id, email}) => {\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img alt=\"robot\" src={`https://robohash.org/${id}{?200x200`} />\r\n\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card\r\n","import React from \"react\";\r\n\r\nimport Card from \"./Card\";\r\n\r\nexport const CardList = ({robots}) => {\r\n  return (\r\n    <div>\r\n      {robots.map((robot) => (\r\n        <Card\r\n          key={robot.id}\r\n          id={robot.id}\r\n          name={robot.name}\r\n          email={robot.email}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const SearchBox = ({ searchField, onSearchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        type=\"search\"\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        placeholder=\"Search robots\"\r\n        value={searchField}\r\n        onChange={onSearchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Scroll = ({ children }) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"1px solid black\",\r\n        height: \"600px\",\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nexport class ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props) \r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({hasError: true})\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) return <h1>Ooops! That is not good!</h1>\r\n\r\n    return this.props.children\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { CardList } from \"../components/CardList\";\r\nimport { SearchBox } from \"../components/SearchBox\";\r\nimport \"./App.css\";\r\nimport { Scroll } from \"../components/Scroll\";\r\nimport { ErrorBoundary } from \"../components/ErrorBoundary\";\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\n\r\nexport const App = () => {\r\n  const searchField = useSelector((state) => state.searchRobots.searchField);\r\n  const robots = useSelector((state) => state.requestRobots.robots);\r\n  const isPending = useSelector((state) => state.requestRobots.isPending);\r\n  const error = useSelector((state) => state.requestRobots.error);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onSearchChange = (event) =>\r\n    dispatch(setSearchField(event.target.value));\r\n\r\n  useEffect(() => {\r\n    return dispatch(requestRobots());\r\n  }, []);\r\n\r\n  const filteredRobots = robots.filter((robot) =>\r\n    robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n  );\r\n\r\n  if (isPending) return <h1 className=\"tc\">Loading...</h1>;\r\n\r\n  return (\r\n    <div className=\"tc\">\r\n      <h1>RoboFriends</h1>\r\n\r\n      <SearchBox onSearchChange={onSearchChange} searchField={searchField} />\r\n\r\n      <Scroll>\r\n        <ErrorBoundary>\r\n          <CardList robots={filteredRobots} />\r\n        </ErrorBoundary>\r\n      </Scroll>\r\n    </div>\r\n  );\r\n};\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => {\r\n  return {\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text,\r\n  };\r\n};\r\n\r\nexport const requestRobots = () =>  (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((response) => response.json())\r\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch((error) =>\r\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n    );\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\"\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: action.payload, isPending: false };\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return { ...state, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunkMiddlware from \"redux-thunk\";\nimport \"tachyons\";\n\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { App } from \"./containers/App\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport { createLogger } from \"redux-logger\";\n\nconst logger = createLogger()\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(logger, thunkMiddlware))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}